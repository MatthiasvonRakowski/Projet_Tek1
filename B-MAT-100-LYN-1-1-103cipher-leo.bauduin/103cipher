#!/bin/python3
# EPITECH PROJECT, 2022
# 103cipher
# File description:
# 103cipher
#

import sys
from inverse_matrix import *
from create_matrix import *
from calcul_matrix import *
from create_message import *


def print_info():
    with open("info_game.txt", 'r') as files:
        files = files.readlines()
    for lines in files:
        print(lines, end='');


def print_matrix(matrix):
    len_m = len(matrix)
    for y in range(len_m):
        for x in range(len(matrix[y])):
            if x == len(matrix[y]) - 1 and y == len_m - 1:
                print(matrix[y][x])
                break
            print(matrix[y][x], end=" ")


def print_key_matrix(matrix):
    for y in range(len(matrix)):
        print(matrix[y][0], end='')
        for x in range(1, len(matrix[y])):
            print("\t%d" % matrix[y][x], end='')
        print()
    print()


def print_key_d_matrix(matrix):
    for y in range(len(matrix)):
        print("%.3f" % matrix[y][0], end='')
        for x in range(1, len(matrix[y])):
            print("\t%.3f" % matrix[y][x], end='')
        print()
    print()


def print_decrypted_matrix(matrix):
    for y in matrix:
        for i in y:
            print(i, end='')
    print()


def verif_args(args):
    if len(args) != 2 and len(args) != 4:
        sys.exit(84)
    if args[1] == "-h":
        print_info()
        sys.exit(0)
    if len(args) == 2:
        print("You don't have enough argument see how to use with option -h")
        sys.exit(84)
    if args[3] != '1' and args[3] != '0':
        print("For the ")
        sys.exit(84)


def main():
    args = sys.argv
    verif_args(args)
    matrix_key = create_key_matrix(args[2])
    matrix_msg = create_msg_matrix(args[1], args[3], matrix_key)
    if args[3] == '1':
        matrix_key = inverse_matrix(matrix_key)
        print("Key matrix:")
        print_key_d_matrix(matrix_key)
    else:
        print("Key matrix:")
        print_key_matrix(matrix_key)
    matrix_res = calcul_matrix(matrix_key, matrix_msg, args[3])
    if args[3] == '1':
        print("Decrypted message:")
        print_decrypted_matrix(matrix_res)
    else:
        print("Encrypted message:")
        print_matrix(matrix_res)
    exit(0)


if __name__ == "__main__":
    main()
