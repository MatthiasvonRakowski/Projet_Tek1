#!/usr/bin/python3

from sys import argv
from os.path import exists
import csv


def check_args():
    if len(argv) != 2:
        exit(84)
    try:
        string = str(argv[1])
    except ValueError:
        exit(84)
    if not exists(string):
        exit(84)


def init_data(file):
    data = []
    with open(file) as csvfile :
        temp_data = csv.reader(csvfile)
        for i in temp_data:
            to_app = i[0].split(";")
            data.append(to_app)
            try:
                temp1 = float(to_app[0])
                temp2 = float(to_app[1])
            except ValueError:
                exit(84)
    for j in range(len(data)):
        data[j][0] = float(data[j][0])
        data[j][1] = float(data[j][1])
    return data


def forward(act, next):
    pas = next[0] - act[0]
    return (next[1] - act[1]) / pas, pas


def backward(old, act):
    h = act[0] - old[0]
    return (act[1] - old[1]) / h, h


def find_eq(dev):
    max = 0
    index = 0
    for i in range(len(dev)):
        if dev[i][1] > max:
            max = dev[i][1]
            index = i
    return index


def calc_dev(data):
    print("Derivative:")
    dev = []
    for i in range(1, len(data) - 1):
        dev_forward, h1 = forward(data[i], data[i + 1])
        dev_backward, h2 = backward(data[i - 1], data[i])
        dev.append((data[i][0], ((dev_forward * h2) + (dev_backward * h1)) / (h1 + h2)))
        print("%.1f ml -> %.2f" % (data[i][0], dev[i - 1][1]))
    print()
    eq = find_eq(dev)
    print("Equivalence point at %.1f ml" % (data[eq + 1][0]))
    print()
    return dev

def calc_sec_dev(dev, data):
    print("Second derivative:")
    sec_dev = []
    ind_dev = 1
    for i in range(2, len(data) - 2):
        dev_forward, h1 = forward(dev[ind_dev], dev[ind_dev + 1])
        dev_backward, h2 = backward(dev[ind_dev - 1], dev[ind_dev])
        sec_dev.append([data[i][0], ((dev_forward * h2) + (dev_backward * h1)) / (h1 + h2)])
        print("%.1f ml -> %.2f" % (data[i][0], sec_dev[ind_dev - 1]))
        ind_dev = ind_dev + 1
    print()
    return sec_dev


def find_intervalle(dev, eq):
    if eq == len(dev) - 1:
        return dev[eq - 1], dev[eq]
    return dev[eq - 1], dev[eq + 1]

def calc_sec_dev_esti(dev, data, eq):
    begin, end = find_intervalle(dev, eq)
    print("Second derivative estimated:")
    while begin[0] < end[0] :
        print("%.1f ml -> " % begin)
        begin += 0.1
    print()

def main():
    check_args()
    data = init_data(str(argv[1]))
    dev = calc_dev(data)
    sex_dev = calc_sec_dev(dev, data)
    eq = find_eq(dev)
    calc_sec_dev_esti(sex_dev, data, eq)
    return 0


if __name__ == "__main__":
    main()
