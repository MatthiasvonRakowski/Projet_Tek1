#!/usr/bin/python3

from extend import *
from sys import argv


def check_float(string):
    try:
        a = float(string)
    except ValueError:
        exit(84)


def check_arguments():
    i = 3
    while i < len(argv):
        if argv[i][0] != '-':
            exit(84)
        else:
            match argv[i][1]:
                case 's':
                    check_float(argv[i + 1])
                    i += 2
                case 'r':
                    check_float(argv[i + 1])
                    i += 2
                case 'z':
                    check_float(argv[i + 1])
                    check_float(argv[i + 2])
                    i += 3
                case 't':
                    check_float(argv[i + 1])
                    check_float(argv[i + 2])
                    i += 3
                case _:
                    exit(84)


def print_transformations():
    i = 3
    while i < len(argv):
        match argv[i][1]:
            case 's':
                print("Reflection over an axis with an inclination angle of %.0f degrees" % (float(argv[i + 1])))
                i += 2
            case 'r':
                print("Rotation by a %.0f degree angle" % (float(argv[i + 1])))
                i += 2
            case 't':
                print("Translation along vector (%.0f, %.0f)" % (float(argv[i + 1]), float(argv[i + 2])))
                i += 3
            case 'z':
                print("Scaling by factors %.0f and %.0f" % (float(argv[i + 1]), float(argv[i + 2])))
                i += 3


def get_matrix():
    matrix = [[1, 0, 0],
              [0, 1, 0],
              [0, 0, 1]]
    i = len(argv) - 1
    while i > 0:
        if argv[i][0] == '-':
            match argv[i][1]:
                case 's':
                    matrix = get_matrix_reflection(argv[i + 1], matrix)
                case 'r':
                    matrix = get_matrix_rotation(argv[i + 1], matrix)
                case 'z':
                    matrix = get_matrix_scale(argv[i + 1], argv[i + 2], matrix)
                case 't':
                    matrix = get_matrix_translation(argv[i + 1], argv[i + 2], matrix)
        i -= 1
    return matrix


def get_coord(x, y, matrix):
    matrix_result = [0, 0, 0]
    matrix_result[0] = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * 1
    matrix_result[1] = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * 1
    return matrix_result


def main():
    if len(argv) < 5:
        exit(84)
    check_float(argv[1])
    check_float(argv[2])
    try:
        check_arguments()
    except IndexError:
        exit(84)
    print_transformations()
    matrix = get_matrix()
    for i in range(0, 3):
        for j in range(0, 3):
            if (matrix[i][j] <= 1e-2 and matrix[i][j] >= -1e-2):
                matrix[i][j] = 0
    print("%.2f   %.2f   %.2f" % (matrix[0][0], matrix[0][1], matrix[0][2]))
    print("%.2f   %.2f   %.2f" % (matrix[1][0], matrix[1][1], matrix[1][2]))
    print("%.2f   %.2f   %.2f" % (matrix[2][0], matrix[2][1], matrix[2][2]))
    coords = get_coord(float(argv[1]), float(argv[2]), matrix)
    print("(%.2f, %.2f) => (%.2f, %.2f)" % (float(argv[1]), float(argv[2]), coords[0], coords[1]))


if __name__ == '__main__':
    main()
